package evote;

import java.util.ArrayList;

public class STV {
	//get quota
	CountVotes cv 		= new CountVotes();
	float quota, 
		votesToBeRedistributed;
	int totalVotes 		= cv.getTotalVotes(),
		noOfCandidates 	= cv.getNoOfCandidates(),
		positions 		= 2,	// Amount of candidates that can be elected
		lowestCand 		= 1;	// Id of the candidate with the lowest votes
	ArrayList<Integer> eliminated = new ArrayList<Integer>();
	
	public void STVCalculate(){
		quota = (float)totalVotes/noOfCandidates;
		System.out.println("QUOTA: "+quota);
		do{
			for(int i = 1; i <= cv.getNoOfCandidates(); i++){
				if(cv.getCandVotes(i) < cv.getCandVotes(lowestCand)){
					lowestCand = i;
					System.out.println("Lowest Cand : " + lowestCand);
				}
			}
			
			for(int j = 1; j <= cv.getNoOfCandidates(); j++){
				if(cv.getCandVotes(j) > quota && !eliminated.contains(j)){
					addToElected(j);
					shuffleVotes(j);
				}else if(lowestCand==j){
					System.out.println("HERE");
					distributeVotes(j);
				}
			}
		}while(positions > 0);
		System.out.println("HERE 3" + positions);
	}
	//check each candidates total votes
	
	//if total votes for candidate is >quota == elected + shuffle their votes
	
	//when noone else is >quota, lowest person eliminated + shuffle their votes

	public void shuffleVotes(int x){
		// take candidates votes away from quota and redistribute the overflow to ballot papers second choice
		votesToBeRedistributed = cv.getCandVotes(x)-quota;
		for(int i = 0; i < votesToBeRedistributed; i++){
			cv.redistribute(x, noOfCandidates);
		}
	}
	
	public void distributeVotes(int x){
		//redistribute all of this candidates votes as they are eliminated
		System.out.println("HERE 2");
		
		votesToBeRedistributed = cv.getCandVotes(x);
		for(int i = 0; i < votesToBeRedistributed; i++){
			cv.redistribute(x, noOfCandidates);
		}
		eliminated.add(x);
	}
	
	public void addToElected(int x){
		if(positions > 0){
			//add them to the elected candidate table
			cv.addToElected(x);
		}
		positions--;
		eliminated.add(x);
	}
}


